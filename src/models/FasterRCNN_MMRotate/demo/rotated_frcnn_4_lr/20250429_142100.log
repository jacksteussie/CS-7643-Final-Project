2025-04-29 14:21:00,569 - mmrotate - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3: Tesla T4
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 12.1, V12.1.105
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.8.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0
OpenCV: 4.11.0
MMCV: 1.7.2
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMRotate: 0.3.4+
------------------------------------------------------------

2025-04-29 14:21:01,480 - mmrotate - INFO - Distributed training: True
2025-04-29 14:21:02,351 - mmrotate - INFO - Config:
dataset_type = 'DOTADataset'
data_root = '/teamspace/studios/this_studio/mmrotate/data/DOTA1_5'
img_scale = (512, 512)
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='RResize', img_scale=(512, 512)),
    dict(
        type='RRandomFlip',
        flip_ratio=[0.25, 0.25, 0.25],
        direction=['horizontal', 'vertical', 'diagonal'],
        version='le90'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=False,
        transforms=[
            dict(type='RResize'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=8,
    train=dict(
        type='DOTADataset',
        ann_file=
        '/teamspace/studios/this_studio/mmrotate/data/DOTA1_5/train/annfiles_corr/',
        img_prefix=
        '/teamspace/studios/this_studio/mmrotate/data/DOTA1_5/train/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='RResize', img_scale=(512, 512)),
            dict(
                type='RRandomFlip',
                flip_ratio=[0.25, 0.25, 0.25],
                direction=['horizontal', 'vertical', 'diagonal'],
                version='le90'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        version='le90',
        classes=('plane', 'baseball-diamond', 'bridge', 'ground-track-field',
                 'small-vehicle', 'large-vehicle', 'ship', 'tennis-court',
                 'basketball-court', 'storage-tank', 'soccer-ball-field',
                 'roundabout', 'harbor', 'swimming-pool', 'helicopter',
                 'container-crane')),
    val=dict(
        type='DOTADataset',
        ann_file=
        '/teamspace/studios/this_studio/mmrotate/data/DOTA1_5/val/annfiles_corr/',
        img_prefix=
        '/teamspace/studios/this_studio/mmrotate/data/DOTA1_5/val/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='RResize'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        version='le90',
        classes=('plane', 'baseball-diamond', 'bridge', 'ground-track-field',
                 'small-vehicle', 'large-vehicle', 'ship', 'tennis-court',
                 'basketball-court', 'storage-tank', 'soccer-ball-field',
                 'roundabout', 'harbor', 'swimming-pool', 'helicopter',
                 'container-crane')),
    test=dict(
        type='DOTADataset',
        ann_file=
        '/teamspace/studios/this_studio/mmrotate/data/DOTA1_5/val/annfiles_corr/',
        img_prefix=
        '/teamspace/studios/this_studio/mmrotate/data/DOTA1_5/val/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='RResize'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        version='le90',
        classes=('plane', 'baseball-diamond', 'bridge', 'ground-track-field',
                 'small-vehicle', 'large-vehicle', 'ship', 'tennis-court',
                 'basketball-court', 'storage-tank', 'soccer-ball-field',
                 'roundabout', 'harbor', 'swimming-pool', 'helicopter',
                 'container-crane')))
evaluation = dict(interval=1, metric='mAP')
optimizer = dict(type='AdamW', lr=0.001, weight_decay=5e-05)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    policy='CosineAnnealing',
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = '/teamspace/studios/this_studio/mmrotate/demo/rotated_frcnn_4_lr/epoch_24 copy.pth'
workflow = [('train', 1), ('val', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
angle_version = 'le90'
model = dict(
    type='RotatedFasterRCNN',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RotatedRPNHead',
        in_channels=256,
        feat_channels=256,
        version='le90',
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='RotatedStandardRoIHead',
        version='le90',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='RotatedShared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=16,
            bbox_coder=dict(
                type='DeltaXYWHAHBBoxCoder',
                angle_range='le90',
                norm_factor=2,
                edge_swap=True,
                target_means=(0.0, 0.0, 0.0, 0.0, 0.0),
                target_stds=(0.1, 0.1, 0.2, 0.2, 0.1)),
            reg_class_agnostic=True,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=False,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            nms_pre=2000,
            min_bbox_size=0,
            score_thr=0.05,
            nms=dict(iou_thr=0.1),
            max_per_img=2000)))
work_dir = '/teamspace/studios/this_studio/mmrotate/demo/rotated_frcnn_4_lr'
classes = ('plane', 'baseball-diamond', 'bridge', 'ground-track-field',
           'small-vehicle', 'large-vehicle', 'ship', 'tennis-court',
           'basketball-court', 'storage-tank', 'soccer-ball-field',
           'roundabout', 'harbor', 'swimming-pool', 'helicopter',
           'container-crane')
auto_resume = False
gpu_ids = range(0, 4)

2025-04-29 14:21:02,351 - mmrotate - INFO - Set random seed to 0, deterministic: False
2025-04-29 14:25:38,825 - mmrotate - INFO - load checkpoint from local path: /teamspace/studios/this_studio/mmrotate/demo/rotated_frcnn_4_lr/epoch_24 copy.pth
2025-04-29 14:25:39,210 - mmrotate - INFO - resumed epoch 24, iter 15000
2025-04-29 14:25:39,211 - mmrotate - INFO - Start running, host: zeus@ip-10-192-12-130, work_dir: /teamspace/studios/this_studio/mmrotate/demo/rotated_frcnn_4_lr
2025-04-29 14:25:39,212 - mmrotate - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2025-04-29 14:25:39,212 - mmrotate - INFO - workflow: [('train', 1), ('val', 1)], max: 30 epochs
2025-04-29 14:25:39,212 - mmrotate - INFO - Checkpoints will be saved to /teamspace/studios/this_studio/mmrotate/demo/rotated_frcnn_4_lr by HardDiskBackend.
2025-04-29 14:26:03,252 - mmrotate - INFO - Epoch [25][50/625]	lr: 9.640e-05, eta: 0:29:38, time: 0.481, data_time: 0.075, memory: 3687, loss_rpn_cls: 0.0154, loss_rpn_bbox: 0.0155, loss_cls: 0.0634, acc: 97.4929, loss_bbox: 0.0918, loss: 0.1861, grad_norm: 1.2510
2025-04-29 14:26:23,356 - mmrotate - INFO - Epoch [25][100/625]	lr: 9.640e-05, eta: 0:26:50, time: 0.402, data_time: 0.006, memory: 4542, loss_rpn_cls: 0.0137, loss_rpn_bbox: 0.0136, loss_cls: 0.0581, acc: 97.6746, loss_bbox: 0.0851, loss: 0.1705, grad_norm: 1.0740
2025-04-29 14:26:43,533 - mmrotate - INFO - Epoch [25][150/625]	lr: 9.640e-05, eta: 0:25:43, time: 0.404, data_time: 0.006, memory: 6435, loss_rpn_cls: 0.0135, loss_rpn_bbox: 0.0150, loss_cls: 0.0579, acc: 97.6887, loss_bbox: 0.0840, loss: 0.1705, grad_norm: 1.0822
2025-04-29 14:27:03,765 - mmrotate - INFO - Epoch [25][200/625]	lr: 9.640e-05, eta: 0:25:00, time: 0.405, data_time: 0.007, memory: 6435, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0134, loss_cls: 0.0565, acc: 97.7554, loss_bbox: 0.0830, loss: 0.1660, grad_norm: 1.0819
2025-04-29 14:27:23,902 - mmrotate - INFO - Epoch [25][250/625]	lr: 9.640e-05, eta: 0:24:25, time: 0.403, data_time: 0.006, memory: 6435, loss_rpn_cls: 0.0130, loss_rpn_bbox: 0.0130, loss_cls: 0.0546, acc: 97.8711, loss_bbox: 0.0808, loss: 0.1613, grad_norm: 1.0313
2025-04-29 14:27:44,100 - mmrotate - INFO - Epoch [25][300/625]	lr: 9.640e-05, eta: 0:23:56, time: 0.404, data_time: 0.007, memory: 6435, loss_rpn_cls: 0.0126, loss_rpn_bbox: 0.0137, loss_cls: 0.0540, acc: 97.8396, loss_bbox: 0.0767, loss: 0.1570, grad_norm: 1.0552
2025-04-29 14:28:04,291 - mmrotate - INFO - Epoch [25][350/625]	lr: 9.640e-05, eta: 0:23:29, time: 0.404, data_time: 0.006, memory: 6435, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0142, loss_cls: 0.0561, acc: 97.7795, loss_bbox: 0.0793, loss: 0.1636, grad_norm: 1.1039
2025-04-29 14:28:24,625 - mmrotate - INFO - Epoch [25][400/625]	lr: 9.640e-05, eta: 0:23:05, time: 0.407, data_time: 0.007, memory: 6435, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0131, loss_cls: 0.0545, acc: 97.8308, loss_bbox: 0.0752, loss: 0.1558, grad_norm: 0.9565
2025-04-29 14:28:44,870 - mmrotate - INFO - Epoch [25][450/625]	lr: 9.640e-05, eta: 0:22:41, time: 0.405, data_time: 0.006, memory: 6435, loss_rpn_cls: 0.0113, loss_rpn_bbox: 0.0129, loss_cls: 0.0512, acc: 97.9734, loss_bbox: 0.0762, loss: 0.1515, grad_norm: 1.0017
2025-04-29 14:29:05,100 - mmrotate - INFO - Epoch [25][500/625]	lr: 9.640e-05, eta: 0:22:18, time: 0.405, data_time: 0.006, memory: 6435, loss_rpn_cls: 0.0128, loss_rpn_bbox: 0.0145, loss_cls: 0.0564, acc: 97.7717, loss_bbox: 0.0842, loss: 0.1679, grad_norm: 1.0581
2025-04-29 14:29:25,579 - mmrotate - INFO - Epoch [25][550/625]	lr: 9.640e-05, eta: 0:21:56, time: 0.410, data_time: 0.007, memory: 6435, loss_rpn_cls: 0.0129, loss_rpn_bbox: 0.0143, loss_cls: 0.0533, acc: 97.8772, loss_bbox: 0.0825, loss: 0.1631, grad_norm: 1.0527
2025-04-29 14:29:46,014 - mmrotate - INFO - Epoch [25][600/625]	lr: 9.640e-05, eta: 0:21:35, time: 0.409, data_time: 0.007, memory: 6435, loss_rpn_cls: 0.0137, loss_rpn_bbox: 0.0149, loss_cls: 0.0555, acc: 97.8215, loss_bbox: 0.0873, loss: 0.1714, grad_norm: 1.0734
2025-04-29 14:29:56,163 - mmrotate - INFO - Saving checkpoint at 25 epochs
